#!groovy

/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright IBM Corporation 2018, 2019
 */


node('zowe-dependency-scanning-rev-split') {
  def lib = library("jenkins-library").org.zowe.jenkins_shared_library

  def pipeline = lib.pipelines.generic.GenericPipeline.new(this)

  pipeline.addBuildParameters(
    booleanParam(
      name: 'PUBLISH_RELEASE',
      description: 'If we want to publish the licenses as a release.',
      defaultValue: false
    ),
    booleanParam(
      name: 'REPLACE',
      description: 'If you want to overwrite an existing "release".',
      defaultValue: false
    )
  )

  def ZOWE_BRANCH = "v1.x/rc"
  def DEPENDENCY_SCAN_HOME = "licenses/dependency-scan"
  def PENDING_APPROVAL_REPORT_NAME = "dependency_approval_action_aggregates.json"
  def MARKDOWN_REPORT_NAME = "markdown_dependency_report.md"
  def MARKDOWN_CLI_REPORT = "cli_dependency_report.md"
  def MARKDOWN_ZOS_REPORT = "zos_dependency_report.md"
  def NOTICES_AGGREGATE_FILE = "notices_aggregate.txt"
  def NOTICES_CLI_FILE = "notices_cli.txt"
  def NOTICES_ZOS_FILE = "notices_zos.txt"
  def ARTIFACT_REPO= "libs-snapshot-local"
  def ARTIFACT_PATH= "org/zowe/licenses"
  def VERSION = "1.28.2"
  def ARTIFACT_VERSION = "${VERSION}-SNAPSHOT"
  def AGG_ARTIFACT_NAME = "zowe_licenses_full-SNAPSHOT.zip"
  def CLI_ARTIFACT_NAME = "zowe_licenses_cli-SNAPSHOT.zip"
  def ZOS_ARTIFACT_NAME = "zowe_licenses_zos-SNAPSHOT.zip"

    // if we're publishing a release, change the default repo, version string, and artifact name
  if (params.PUBLISH_RELEASE) {
      ARTIFACT_REPO = "libs-release-local"
      ARTIFACT_VERSION = "${VERSION}"
      AGG_ARTIFACT_NAME = "zowe_licenses_full.zip"
      CLI_ARTIFACT_NAME = "zowe_licenses_cli.zip"
      ZOS_ARTIFACT_NAME = "zowe_licenses_zos.zip"
  }

  def FULL_ARTIFACT_PATH = "${ARTIFACT_REPO}/${ARTIFACT_PATH}/${ARTIFACT_VERSION}/"

  pipeline.admins.add("markackert")

  def registry = lib.npm.Registry.new(this);
  registry.init(
      registry: lib.Constants.DEFAULT_LFJ_NPM_PRIVATE_REGISTRY_INSTALL,
      email: lib.Constants.DEFAULT_LFJ_NPM_PRIVATE_REGISTRY_EMAIL,
      usernamePasswordCredential: lib.Constants.DEFAULT_LFJ_NPM_PRIVATE_REGISTRY_CREDENTIAL
  );
  registry.login();

  pipeline.setup(
    packageName: 'org.zowe',
    version: "${ARTIFACT_VERSION}",
    github: [
      email                      : lib.Constants.DEFAULT_GITHUB_ROBOT_EMAIL,
      usernamePasswordCredential : lib.Constants.DEFAULT_GITHUB_ROBOT_CREDENTIAL,
    ],
    artifactory: [
      url                        : lib.Constants.DEFAULT_LFJ_ARTIFACTORY_URL,
      usernamePasswordCredential : lib.Constants.DEFAULT_LFJ_ARTIFACTORY_ROBOT_CREDENTIAL,
    ]
  );

  pipeline.build(
    name          : "Generate License Report",
    timeout       : [time: 500, unit: 'MINUTES'],
    environment: [
      ZOWE_MANIFEST_BRANCH: "${ZOWE_BRANCH}",
      APP_LICENSE_SCAN: "true",
      APP_NOTICES_SCAN: "true"
    ],
    isSkippable   : false,
    operation     : {
        dir("${DEPENDENCY_SCAN_HOME}") {
            sh "yarn install && yarn build"
            sh "node lib/index.js"
            sh "cd build && zip -r logs.zip logs/"
            sh "cd build && zip -r license_reports.zip license_reports/"
            sh "cd build && zip -r notice_reports.zip notice_reports/"
            sh "mkdir -p zowe_licenses"
            sh "mkdir -p zowe_cli_licenses"
            sh "mkdir -p zowe_zos_licenses"
            sh "cp ../resources/* zowe_licenses/"
            sh "cp ../resources/* zowe_cli_licenses/"
            sh "cp ../resources/* zowe_zos_licenses/"

            // Aggregate
            sh "cp build/notice_reports/${NOTICES_AGGREGATE_FILE} zowe_licenses/zowe_full_notices.txt"
            sh "cp build/license_reports/${MARKDOWN_REPORT_NAME} zowe_licenses/zowe_full_dependency_list.md"
            sh "zip -j ${AGG_ARTIFACT_NAME} zowe_licenses/*"

            // CLI
            sh "cp build/notice_reports/${NOTICES_CLI_FILE} zowe_cli_licenses/zowe_cli_notices.txt"
            sh "cp build/license_reports/${MARKDOWN_CLI_REPORT} zowe_cli_licenses/zowe_cli_dependency_list.md"
            sh "zip -j ${CLI_ARTIFACT_NAME} zowe_cli_licenses/*"
            // z/OS
            sh "cp build/notice_reports/${NOTICES_ZOS_FILE} zowe_zos_licenses/zowe_zos_notices.txt"
            sh "cp build/license_reports/${MARKDOWN_ZOS_REPORT} zowe_zos_licenses/zowe_zos_dependency_list.md"
            sh "zip -j ${ZOS_ARTIFACT_NAME} zowe_zos_licenses/*"
        }
    }
  )

  pipeline.createStage(
      name: "Archive Logs",
      stage: {
        dir("${DEPENDENCY_SCAN_HOME}"){
          archiveArtifacts artifacts: "${AGG_ARTIFACT_NAME}"
          archiveArtifacts artifacts: "${CLI_ARTIFACT_NAME}"
          archiveArtifacts artifacts: "${ZOS_ARTIFACT_NAME}"
        }
    }
  )

  pipeline.createStage(
    name: "Publish Licenses",
    stage: {
      if (params.REPLACE) {
        def jfrog = lib.artifact.JFrogArtifactory.new(this)
        jfrog.init(
            url: lib.Constants.DEFAULT_LFJ_ARTIFACTORY_URL,
            usernamePasswordCredential: "ZoweJfrogDANGEROUS"
        )
        def ret = jfrog.delete(
            pattern: "${FULL_ARTIFACT_PATH}${AGG_ARTIFACT_NAME}"
        )
        def retCli = jfrog.delete(
            pattern: "${FULL_ARTIFACT_PATH}${CLI_ARTIFACT_NAME}"
        )
        def retZos = jfrog.delete(
            pattern: "${FULL_ARTIFACT_PATH}${ZOS_ARTIFACT_NAME}"
        )
        sh "echo ${ret} ${retCli} ${retZos} artifacts deleted"
      }
      dir("${DEPENDENCY_SCAN_HOME}"){
        def uploadSpec = """{
        "files": [{
          "pattern": "${AGG_ARTIFACT_NAME}",
          "target": "${FULL_ARTIFACT_PATH}"
        },{
          "pattern": "${CLI_ARTIFACT_NAME}",
          "target": "${FULL_ARTIFACT_PATH}"
        },{
          "pattern": "${ZOS_ARTIFACT_NAME}",
          "target": "${FULL_ARTIFACT_PATH}"
        }]
        }"""
        pipeline.artifactory.upload([specContent: uploadSpec])
      }
    }
  )

  pipeline.end()
}